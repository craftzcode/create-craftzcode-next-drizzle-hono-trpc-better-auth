---
description: 
globs: packages/api/**/*.ts,packages/api/**/*.tsx
alwaysApply: false
---
# Comprehensive Hono.js Development Guide

## 1. Middleware for Authentication and Logging

### Authentication Middleware
- Implement robust authentication using middleware
- Verify user credentials before allowing route access
- Use JWT or session-based authentication
- Protect sensitive routes with role-based access control

```typescript
// Middleware for JWT authentication
const authMiddleware = async (c, next) => {
  const token = c.req.header('Authorization')?.replace('Bearer ', '')
  
  if (!token) {
    return c.json({ error: 'No authentication token provided' }, 401)
  }

  try {
    // Verify token and extract user information
    const decoded = verifyToken(token)
    c.set('user', decoded) // Attach user info to context
    await next()
  } catch (error) {
    return c.json({ error: 'Invalid or expired token' }, 403)
  }
}

// Logging middleware
const loggingMiddleware = async (c, next) => {
  const start = Date.now()
  await next()
  const end = Date.now()

  console.log(`
    Method: ${c.req.method}
    Path: ${c.req.path}
    Status: ${c.res.status}
    Duration: ${end - start}ms
  `)
}
```

## 2. Route Handler Implementation

### Route Organization
- Use modular route handlers
- Separate concerns between routes
- Implement clear and descriptive route naming
- Use appropriate HTTP methods

```typescript
// User routes
const userRoutes = new Hono()

userRoutes.get('/profile', authMiddleware, async (c) => {
  const user = c.get('user')
  return c.json({ profile: user })
})

userRoutes.post('/update', authMiddleware, async (c) => {
  const body = await c.req.json()
  // Update user logic
  return c.json({ message: 'Profile updated successfully' })
})
```

## 3. Environment Variable Management

### Cloudflare Workers Environment
- Utilize `c.env` for secure configuration
- Never hardcode sensitive information
- Use environment-specific configurations

```typescript
const app = new Hono()

app.get('/config', (c) => {
  // Access environment variables safely
  const apiKey = c.env.API_KEY
  const dbConnectionString = c.env.DATABASE_URL

  return c.json({
    environment: c.env.NODE_ENV,
    // Return non-sensitive config details
    apiVersion: '1.0'
  })
})
```

## 4. Global Error Handling

### Centralized Error Management
- Implement comprehensive error handling
- Provide meaningful error responses
- Log errors for debugging

```typescript
app.onError((err, c) => {
  // Log the full error for server-side tracking
  console.error('Unhandled Error:', err)

  // Return user-friendly error response
  return c.json({
    error: true,
    message: err.message || 'Internal Server Error',
    // Optionally include error code or reference for tracking
    errorCode: generateErrorCode()
  }, 500)
})
```

## 5. Response Handling

### Flexible Response Methods
- Use appropriate response methods
- Handle different content types
- Implement consistent response structures

```typescript
app.get('/users', async (c) => {
  // Text response
  if (needsTextResponse()) {
    return c.text('User list generated')
  }

  // JSON response
  const users = await fetchUsers()
  return c.json({ 
    users, 
    total: users.length 
  })

  // Redirect response
  return c.redirect('/login', 302)
})
```

## 6. Caching Strategies

### Performance Optimization
- Implement server-side caching
- Use `Cache-Control` headers
- Leverage Cloudflare KV for distributed caching

```typescript
app.get('/data', async (c) => {
  // Check KV cache first
  const cachedData = await c.env.MY_KV.get('data-key')
  
  if (cachedData) {
    // Set cache headers
    c.res.headers.set('Cache-Control', 'public, max-age=3600')
    return c.json(JSON.parse(cachedData))
  }

  // Fetch and cache new data
  const freshData = await fetchData()
  await c.env.MY_KV.put('data-key', JSON.stringify(freshData), {
    expirationTtl: 3600 // 1-hour cache
  })

  return c.json(freshData)
})
```