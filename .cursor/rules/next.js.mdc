---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: apps/docs/**/*.ts,apps/docs/**/*.tsx,apps/web/**/*.ts,apps/web/**/*.tsx
alwaysApply: false
---
# Next.js Project Architecture Guidelines

## Project Structure and Organization

### 1. Component and Module Architecture

#### Server Components Prioritization
- **Rule**: Prioritize using server components (RSC) for performance, SEO, and data fetching
- **Rationale**: Server components reduce client-side JavaScript, improve initial load times, and enable better search engine indexing
- **Example**:
  ```typescript
  // Good: Server Component
  export default async function ProductPage() {
    const products = await fetchProducts(); // Server-side data fetching
    return <ProductList products={products} />;
  }
  ```

#### Client Components Usage
- **Rule**: Use client components sparingly, only when interactivity is required
- **Rationale**: Minimize client-side rendering to improve performance and reduce bundle size
- **Example**:
  ```typescript
  'use client';
  // Only use client components for interactive elements
  export function AddToCartButton({ productId }) {
    const [isAdding, setIsAdding] = useState(false);
    // Interactive logic here
  }
  ```

### 2. Routing and Layout Management

#### Next.js File-Based Routing
- **Rule**: Take advantage of Next.js file-based routing system for simplicity
- **Recommended Structure**:
  ```
  app/
  ├── products/
  │   ├── page.tsx
  │   ├── layout.tsx
  │   └── loading.tsx
  ├── categories/
  │   └── page.tsx
  └── dashboard/
      └── page.tsx
  ```

#### Centralized Layouts
- **Rule**: Centralize shared layouts in `layout.tsx` for consistency across pages
- **Example**:
  ```typescript
  // app/layout.tsx
  export default function RootLayout({ children }) {
    return (
      <html>
        <body>
          <Header />
          {children}
          <Footer />
        </body>
      </html>
    );
  }
  ```

### 3. Error and Loading States

#### Loading State Handling
- **Rule**: Add `loading.tsx` to handle loading states for better UX
- **Example**:
  ```typescript
  // app/products/loading.tsx
  export default function Loading() {
    return <Spinner message="Loading products..." />;
  }
  ```

#### Error Page Implementation
- **Rule**: Implement custom error pages with `error.tsx` to handle errors gracefully
- **Example**:
  ```typescript
  // app/error.tsx
  export default function Error({ error, reset }) {
    return (
      <div>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </div>
    );
  }
  ```

### 4. Backend and Data Management

#### tRPC Integration
- **Rule**: Use tRPC to manage backend logic within the app structure
- **Example**:
  ```typescript
  // src/server/routers/userRouter.ts
  export const userRouter = createRouter()
    .query('getUsers', {
      resolve: async () => {
        // Fetch users logic
      }
    });
  ```

### 5. Performance Optimization

#### Rendering Optimization
- **Rule**: Optimize server-side rendering (SSR) and static site generation (SSG) for faster loading times
- **Techniques**:
  - Use `generateStaticParams()` for static generation
  - Implement incremental static regeneration (ISR)
  - Leverage React Server Components

### 6. Code Organization

#### Module-Based Structure
- **Rule**: Organize code by feature modules in `src/modules/{module-name}/`
- **Recommended Structure**:
  ```
  src/modules/
  ├── users/
  │   ├── components/
  │   ├── hooks/
  │   ├── lib/
  │   └── types/
  ├── products/
  │   ├── components/
  │   ├── hooks/
  │   └── lib/
  ```

#### Helper Function Placement
- **Rule**: Place helper functions in specific locations
  - Module-specific helpers: `src/modules/{module-name}/lib/`
  - Component-specific helpers: `src/modules/{module-name}/lib/{component-name}/`
  - Global helpers: `src/lib/`

### 7. Documentation and Code Quality

#### Comprehensive Documentation
- **Rule**: Include comprehensive documentation for logic, algorithms, and complex implementations
- **Example 1: Utility Functions**:
  ```typescript
  // src/modules/lib/inventory-dashboard/utils.ts

  /**
   * Calculates the percentage change between two values
   *
   * @description
   * This function calculates the percentage difference between current and previous values.
   * The result is rounded to one decimal place.
   *
   * Special cases:
   * - If previous value is 0 and current value > 0: returns 100%
   * - If previous value is 0 and current value = 0: returns 0%
   *
   * @example
   * ```ts
   * // Basic usage
   * calculatePercentageChange(150, 100) // Returns 50.0
   *
   * // Handle zero previous value
   * calculatePercentageChange(100, 0) // Returns 100.0
   * calculatePercentageChange(0, 0)   // Returns 0.0
   *
   * // Negative change
   * calculatePercentageChange(80, 100) // Returns -20.0
   * ```
   *
   * @param current - The current period value
   * @param previous - The previous period value to compare against
   * @returns The percentage change as a number with one decimal place
   */
  export const calculatePercentageChange = (
    current: number,
    previous: number
  ): number => {
    if (previous === 0) return current > 0 ? 100 : 0
    return Number((((current - previous) / previous) * 100).toFixed(1))
  }

  /**
   * Determines the trend direction by comparing two values
   *
   * @description
   * This function compares current and previous values to determine if there's
   * an increasing or decreasing trend. Equal values are considered an increase.
   *
   * @example
   * ```ts
   * // Increasing trend
   * determineTrend(150, 100) // Returns 'increase'
   * determineTrend(100, 100) // Returns 'increase' (equal values)
   *
   * // Decreasing trend
   * determineTrend(80, 100)  // Returns 'decrease'
   * ```
   *
   * @param current - The current period value
   * @param previous - The previous period value to compare against
   * @returns 'increase' if current >= previous, 'decrease' otherwise
   */
  export const determineTrend = (
    current: number,
    previous: number
  ): AnalyticsTrend => {
    return current >= previous ? 'increase' : 'decrease'
  }
  ```

- **Example 2: Dashboard Component**:
  ```typescript
  // src/modules/inventory/ui/components/inventory-dashboard.tsx

  /**
   * Creates a metric object with analytics data
   *
   * @description
   * This function takes current and previous values for a metric and calculates:
   * - Percentage change between periods
   * - Trend direction (increase/decrease)
   * - Stores both current and historical data
   *
   * Note: While previousDate is currently not displayed in the UI,
   * it's kept for potential future features like:
   * - Date range displays
   * - Historical data tracking
   * - Custom date comparison periods
   *
   * @example
   * ```ts
   * createMetricWithAnalytics({
   *   status: 'In Stock',
   *   description: 'Total medicines available',
   *   currentValue: 1250,
   *   previousValue: 1100,
   *   currentDate: new Date('2024-03-15'),
   *   previousDate: new Date('2024-02-15')
   * })
   * ```
   */
  const createMetricWithAnalytics = ({
    status,
    description,
    currentValue,
    previousValue,
    currentDate,
    previousDate
  }: CreateMetricWithAnalytics): DashboardMetric => {
    const percentageChange = calculatePercentageChange(
      currentValue,
      previousValue
    )
    const trend = determineTrend(currentValue, previousValue)

    return {
      status,
      description,
      currentData: {
        total: currentValue,
        date: currentDate
      },
      previousData: {
        total: previousValue,
        date: previousDate
      },
      analytics: {
        percentage: Math.abs(percentageChange), // Absolute value for display purposes
        trend,
        comparedTo: 'last month'
      }
    }
  }

  /**
   * Renders a single metric card with trend indicators
   *
   * @description
   * Displays:
   * - Metric title
   * - Current value with proper formatting
   * - Description
   * - Trend indicator (up/down arrow)
   * - Percentage change with color coding
   *   - Green for increases
   *   - Red for decreases
   *
   * @param metric - The metric data to display
   */
  const MetricCard = ({ metric }: { metric: DashboardMetric }) => {
    const { status, currentData, description, analytics } = metric
    const { percentage, trend, comparedTo } = analytics

    return (
      <Card className='rounded-md shadow-xs'>
        <CardContent>
          <div className='space-y-1.5'>
            <CardTitle className='text-muted-foreground text-sm font-normal'>
              {status}
            </CardTitle>
            <h2 className='text-2xl font-bold'>
              {currentData.total.toLocaleString()}
            </h2>
            <p className='text-muted-foreground text-xs'>{description}</p>
            <div className='flex items-center gap-1 text-xs'>
              <div
                className={cn(
                  'flex items-center gap-0.5 rounded-md px-1.5 py-0.5',
                  trend === 'increase' ? 'bg-emerald-500/10' : 'bg-destructive/10'
                )}
              >
                {trend === 'increase' ? (
                  <RiArrowUpSLine size={16} className='text-emerald-500' />
                ) : (
                  <RiArrowDownSLine size={16} className='text-red-500' />
                )}
                <span
                  className={cn(
                    trend === 'increase' ? 'text-emerald-500' : 'text-red-500'
                  )}
                >
                  {percentage}%
                </span>
              </div>
              <span className='text-muted-foreground'>vs {comparedTo}</span>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }
  ```

- **Best Practices for Documentation**:
  - Provide clear descriptions of function purpose
  - Document special cases and edge conditions
  - Include realistic usage examples
  - Specify parameter types and return types
  - Explain the reasoning behind the implementation

## Additional Recommendations
- Use TypeScript for type safety
- Implement proper error boundaries
- Follow consistent code formatting (consider using Prettier)
- Use ESLint for code quality checks
- Write unit and integration tests

## Continuous Improvement
- Regularly review and refactor code
- Stay updated with Next.js and React best practices
- Performance profile your application
