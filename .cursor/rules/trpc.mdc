---
description: 
globs: packages/api/**/*.ts,packages/api/**/*.tsx
alwaysApply: false
---
# tRPC Router Design Guidelines

## 1. Naming Conventions

### Router Naming
- **Rule**: Use descriptive, domain-specific names for routers
- **Best Practice**: Name routers based on their primary domain or resource
- **Example**:
  ```typescript
  // Bad: generic naming
  const appRouter = createTRPCRouter({...})

  // Good: specific, domain-driven naming
  const userRouter = createTRPCRouter({...})
  const authRouter = createTRPCRouter({...})
  const inventoryRouter = createTRPCRouter({...})
  ```

## 2. Router File Structure

### File Organization
- **Rule**: Each router should be in its own file under a `routers` directory
- **Recommended Structure**:
  ```
  api/
  └── src/
      ├── routers/
      │   ├── user.ts
      │   ├── auth.ts
      │   ├── inventory.ts
      │   └── index.ts
      └── other files
  ```

## 3. Procedure Grouping and Organization

### Related Procedures
- **Rule**: Group related procedures within the same router
- **Example**:
  ```typescript
  export const userRouter = createTRPCRouter({
    // User profile-related procedures
    getProfile: publicProcedure
      .query(({ ctx }) => {
        return ctx.prisma.user.findMany();
      }),
    
    updateProfile: protectedProcedure
      .input(updateProfileSchema)
      .mutation(({ ctx, input }) => {
        return ctx.prisma.user.update({
          where: { id: ctx.user.id },
          data: input
        });
      }),
    
    // User management procedures
    listUsers: protectedProcedure
      .use(adminMiddleware)
      .query(({ ctx }) => {
        return ctx.prisma.user.findMany();
      })
  });
  ```

## 4. Procedure Type Usage

### Authentication Levels
- **Rule**: Use appropriate procedure types for different access levels
- **Example**:
  ```typescript
  // Public endpoints (no authentication required)
  const userRouter = createTRPCRouter({
    getPublicUserProfile: publicProcedure
      .input(z.object({ username: z.string() }))
      .query(({ input }) => {
        // Fetch public user information
      })
  });

  // Protected endpoints (authenticated users only)
  const profileRouter = createTRPCRouter({
    updatePersonalInfo: protectedProcedure
      .input(updateProfileSchema)
      .mutation(({ ctx, input }) => {
        // Update user's own profile
        return ctx.prisma.user.update({
          where: { id: ctx.user.id },
          data: input
        });
      })
  });
  ```

## 5. Custom Middleware for Authorization

### Advanced Authorization Checks
- **Rule**: Create custom middleware procedures for specific authorization checks
- **Example**:
  ```typescript
  // Admin-only middleware
  const adminProcedure = protectedProcedure.use(({ ctx, next }) => {
    if (!ctx.user.isAdmin) {
      throw new TRPCError({ 
        code: 'FORBIDDEN', 
        message: 'Admin access required' 
      });
    }
    return next();
  });

  // Role-based authorization router
  const managementRouter = createTRPCRouter({
    // Only accessible by admin users
    deleteUser: adminProcedure
      .input(z.object({ userId: z.string() }))
      .mutation(({ input }) => {
        // User deletion logic
      }),

    // Accessible by managers and admins
    generateReport: protectedProcedure
      .use(({ ctx, next }) => {
        if (!ctx.user.isManager && !ctx.user.isAdmin) {
          throw new TRPCError({ 
            code: 'FORBIDDEN', 
            message: 'Management access required' 
          });
        }
        return next();
      })
      .query(() => {
        // Report generation logic
      })
  });
  ```

## 6. Input Validation

### Schema Validation
- **Rule**: Always validate input using Zod schemas
- **Example**:
  ```typescript
  // Separate schemas directory
  // src/schemas/user.schema.ts
  export const createUserSchema = z.object({
    name: z.string().min(2, "Name too short"),
    email: z.string().email("Invalid email format"),
    age: z.number().min(18, "Must be 18 or older")
  }).strict();

  // Router implementation
  const userRouter = createTRPCRouter({
    createUser: publicProcedure
      .input(createUserSchema)
      .mutation(({ input }) => {
        // User creation logic with validated input
      })
  });
  ```

## 7. Semantic Naming Conventions

### Query and Mutation Naming
- **Rule**: Use semantic naming with clear, descriptive names
- **Example**:
  ```typescript
  const productRouter = createTRPCRouter({
    // Queries (nouns)
    getProduct: publicProcedure
      .input(z.object({ id: z.string() }))
      .query(({ input }) => {
        // Fetch product details
      }),
    
    listProducts: publicProcedure
      .query(() => {
        // Retrieve list of products
      }),

    // Mutations (verb-prefixed)
    createProduct: protectedProcedure
      .input(createProductSchema)
      .mutation(({ input }) => {
        // Create new product
      }),

    updateProduct: protectedProcedure
      .input(updateProductSchema)
      .mutation(({ input }) => {
        // Update existing product
      }),

    deleteProduct: protectedProcedure
      .input(z.object({ id: z.string() }))
      .mutation(({ input }) => {
        // Remove product
      })
  });
  ```

### 8. Documentation and Code Quality

#### Comprehensive Documentation
- **Rule**: Include comprehensive documentation for logic, algorithms, and complex implementations
- **Example 1: Middleware**:
  ```typescript
   /**
   * Protected procedure middleware for authenticated routes
   *
   * @description
   * This middleware ensures that the request has a valid user session before proceeding.
   * It throws an UNAUTHORIZED error if no session exists, preventing unauthorized access
   * to protected API endpoints.
   *
   * The session is obtained from the tRPC context, which is created in `createTRPCContext`
   * (lib/context.ts). There, the session is extracted from the request headers using
   * the auth API: `auth.api.getSession({ headers: c.req.raw.headers })`.
   *
   * Note that `c.req.raw.headers` comes from the Hono context (`c: HonoContext`) that is passed to
   * `createTRPCContext`. This creates a bridge between Hono's web framework context and tRPC's
   * context system, allowing session data to flow from the HTTP request (via Hono) into the
   * tRPC procedure handlers.
   *
   * @example
   * // Creating a protected route that requires authentication
   * export const userRouter = createTRPCRouter({
   *   // This route can only be accessed by authenticated users
   *   getProfile: protectedProcedure
   *     .query(({ ctx }) => {
   *       // ctx.session is guaranteed to exist here
   *       const userId = ctx.session.user.id;
   *       return getUserProfile(userId);
   *     }),
   *
   *   // Another protected route with input validation
   *   updateProfile: protectedProcedure
   *     .input(z.object({ name: z.string() }))
   *     .mutation(({ ctx, input }) => {
   *       const userId = ctx.session.user.id;
   *       return updateUserData(userId, input);
   *     })
   * });
   *
   * @param {Object} params - The procedure parameters
   * @param {Context} params.ctx - The tRPC context containing session (if authenticated)
   * @param {Function} params.next - Function to call the next middleware or resolver
   * @throws {TRPCError} Throws with code 'UNAUTHORIZED' if no session exists
   * @returns Result of the next middleware with the session in context
  */
  export const protectedProcedure = t.procedure.use(async ({ ctx, next }) => {
   if (!ctx.session) {
     throw new TRPCError({ code: 'UNAUTHORIZED' })
   }
   return next({
     ctx: {
       ...ctx,
       session: ctx.session
     }
    })
  })
  ```

- **Example 2: Function**:
  ```typescript
   /**
   * Creates a tRPC context from a Hono context
   *
   * @description
   * This function creates a tRPC context by extracting session information from
   * the Hono context. It combines the web framework's context (Hono) with tRPC's
   * context system to enable authenticated API routes.
   *
   * Performance considerations:
   * - Using server-side session fetching avoids redundant client-side network requests
   * - Direct API access to auth.api.getSession is more efficient than client-side fetching
   * - The React cache function memoizes context creation to prevent duplicate session lookups
   *   for the same request, reducing database/auth provider load
   *
   * The cache wrapper ensures that within a single React Server Component render pass,
   * multiple calls to createTRPCContext with the same Hono context will reuse the
   * previously computed result rather than making duplicate auth verification calls.
   *
   * @param c - The Hono context from the HTTP request
   * @returns A context object containing the user session (if authenticated)
   */
  export const createTRPCContext = cache(async (c: HonoContext) => {
    const session = await auth.api.getSession({
      headers: c.req.raw.headers
   })

    console.log({
      Context: session
   })

   return { session }
  })
  ```

- **Best Practices for Documentation**:
  - Provide clear descriptions of function purpose
  - Document special cases and edge conditions
  - Include realistic usage examples
  - Specify parameter types and return types
  - Explain the reasoning behind the implementation

## Best Practices Summary
- Keep routers focused and domain-specific
- Use appropriate authentication levels
- Implement robust input validation
- Create clear, semantic procedure names
- Use middleware for advanced authorization
- Maintain a consistent file and naming structure

## Common Pitfalls to Avoid
- Avoid mixing concerns in a single router
- Don't skip input validation
- Be cautious with overly broad public procedures
- Prevent unauthorized access with proper middleware
